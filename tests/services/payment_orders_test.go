package services

import (
	"bytes"
	"context"
	"errors"
	"io"
	"net/http/httputil"
	"testing"
	"time"

	moderntreasury "github.com/Modern-Treasury/modern-treasury-go"
	"github.com/Modern-Treasury/modern-treasury-go/core"
	"github.com/Modern-Treasury/modern-treasury-go/option"
	"github.com/Modern-Treasury/modern-treasury-go/requests"
)

func TestPaymentOrderNewWithOptionalParams(t *testing.T) {
	t.Skip("skipped: prism mock server is broken for file uploads")
	c := moderntreasury.NewModernTreasury(
		option.WithAPIKey("APIKey"),
		option.WithOrganizationID("my-organization-ID"),
		option.WithBaseURL("http://127.0.0.1:4010"),
	)
	_, err := c.PaymentOrders.New(context.TODO(), &requests.PaymentOrderNewParams{Type: moderntreasury.F(requests.PaymentOrderTypeACH), Subtype: moderntreasury.F(requests.PaymentOrderSubtypeCcd), Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewParamsDirectionCredit), Priority: moderntreasury.F(requests.PaymentOrderNewParamsPriorityHigh), OriginatingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ReceivingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Accounting: moderntreasury.F(requests.PaymentOrderNewParamsAccounting{AccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")}), AccountingCategoryID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), AccountingLedgerClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Currency: moderntreasury.F(requests.CurrencyAed), EffectiveDate: moderntreasury.F(time.Now()), Description: moderntreasury.F("string"), StatementDescriptor: moderntreasury.F("string"), RemittanceInformation: moderntreasury.F("string"), Purpose: moderntreasury.F("string"), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), ChargeBearer: moderntreasury.F(requests.PaymentOrderNewParamsChargeBearerShared), ForeignExchangeIndicator: moderntreasury.F(requests.PaymentOrderNewParamsForeignExchangeIndicatorFixedToVariable), ForeignExchangeContract: moderntreasury.F("string"), NsfProtected: moderntreasury.F(true), OriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyIdentifier: moderntreasury.F("string"), UltimateReceivingPartyName: moderntreasury.F("string"), UltimateReceivingPartyIdentifier: moderntreasury.F("string"), SendRemittanceAdvice: moderntreasury.F(true), ExpiresAt: moderntreasury.F(time.Now()), FallbackType: moderntreasury.F(requests.PaymentOrderNewParamsFallbackTypeACH), ReceivingAccount: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccount{AccountType: moderntreasury.F(requests.ExternalAccountTypeCash), PartyType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountPartyTypeBusiness), PartyAddress: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountPartyAddress{Line1: moderntreasury.F("string"), Line2: moderntreasury.F("string"), Locality: moderntreasury.F("string"), Region: moderntreasury.F("string"), PostalCode: moderntreasury.F("string"), Country: moderntreasury.F("string")}), Name: moderntreasury.F("string"), AccountDetails: moderntreasury.F([]requests.PaymentOrderNewParamsReceivingAccountAccountDetails{{AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}}), RoutingDetails: moderntreasury.F([]requests.PaymentOrderNewParamsReceivingAccountRoutingDetails{{RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountRoutingDetailsPaymentTypeACH)}}), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), PartyName: moderntreasury.F("string"), PartyIdentifier: moderntreasury.F("string"), PlaidProcessorToken: moderntreasury.F("string"), ContactDetails: moderntreasury.F([]requests.PaymentOrderNewParamsReceivingAccountContactDetails{{ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}})}), LedgerTransaction: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransaction{Description: moderntreasury.F("string"), Status: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransactionStatusArchived), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), EffectiveDate: moderntreasury.F(time.Now()), LedgerEntries: moderntreasury.F([]requests.PaymentOrderNewParamsLedgerTransactionLedgerEntries{{Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}, {Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}, {Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}}), ExternalID: moderntreasury.F("string"), LedgerableType: moderntreasury.F(requests.PaymentOrderNewParamsLedgerTransactionLedgerableTypeCounterparty), LedgerableID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")}), LineItems: moderntreasury.F([]requests.PaymentOrderNewParamsLineItems{{Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}}), TransactionMonitoringEnabled: moderntreasury.F(true), Documents: moderntreasury.F([]requests.PaymentOrderNewParamsDocuments{{DocumentType: moderntreasury.F("string"), File: moderntreasury.F(io.Reader(bytes.NewBuffer([]byte("some file contents"))))}, {DocumentType: moderntreasury.F("string"), File: moderntreasury.F(io.Reader(bytes.NewBuffer([]byte("some file contents"))))}, {DocumentType: moderntreasury.F("string"), File: moderntreasury.F(io.Reader(bytes.NewBuffer([]byte("some file contents"))))}})})
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestPaymentOrderGet(t *testing.T) {
	c := moderntreasury.NewModernTreasury(
		option.WithAPIKey("APIKey"),
		option.WithOrganizationID("my-organization-ID"),
		option.WithBaseURL("http://127.0.0.1:4010"),
	)
	_, err := c.PaymentOrders.Get(
		context.TODO(),
		"string",
	)
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestPaymentOrderUpdateWithOptionalParams(t *testing.T) {
	c := moderntreasury.NewModernTreasury(
		option.WithAPIKey("APIKey"),
		option.WithOrganizationID("my-organization-ID"),
		option.WithBaseURL("http://127.0.0.1:4010"),
	)
	_, err := c.PaymentOrders.Update(
		context.TODO(),
		"string",
		&requests.PaymentOrderUpdateParams{Type: moderntreasury.F(requests.PaymentOrderTypeACH), Subtype: moderntreasury.F(requests.PaymentOrderSubtypeCcd), Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderUpdateParamsDirectionCredit), Priority: moderntreasury.F(requests.PaymentOrderUpdateParamsPriorityHigh), OriginatingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ReceivingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Accounting: moderntreasury.F(requests.PaymentOrderUpdateParamsAccounting{AccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")}), AccountingCategoryID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), AccountingLedgerClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Currency: moderntreasury.F(requests.CurrencyAed), EffectiveDate: moderntreasury.F(time.Now()), Description: moderntreasury.F("string"), StatementDescriptor: moderntreasury.F("string"), RemittanceInformation: moderntreasury.F("string"), Purpose: moderntreasury.F("string"), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), ChargeBearer: moderntreasury.F(requests.PaymentOrderUpdateParamsChargeBearerShared), ForeignExchangeIndicator: moderntreasury.F(requests.PaymentOrderUpdateParamsForeignExchangeIndicatorFixedToVariable), ForeignExchangeContract: moderntreasury.F("string"), NsfProtected: moderntreasury.F(true), OriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyIdentifier: moderntreasury.F("string"), UltimateReceivingPartyName: moderntreasury.F("string"), UltimateReceivingPartyIdentifier: moderntreasury.F("string"), SendRemittanceAdvice: moderntreasury.F(true), ExpiresAt: moderntreasury.F(time.Now()), Status: moderntreasury.F(requests.PaymentOrderUpdateParamsStatusApproved), CounterpartyID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), FallbackType: moderntreasury.F(requests.PaymentOrderUpdateParamsFallbackTypeACH), ReceivingAccount: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccount{AccountType: moderntreasury.F(requests.ExternalAccountTypeCash), PartyType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountPartyTypeBusiness), PartyAddress: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountPartyAddress{Line1: moderntreasury.F("string"), Line2: moderntreasury.F("string"), Locality: moderntreasury.F("string"), Region: moderntreasury.F("string"), PostalCode: moderntreasury.F("string"), Country: moderntreasury.F("string")}), Name: moderntreasury.F("string"), AccountDetails: moderntreasury.F([]requests.PaymentOrderUpdateParamsReceivingAccountAccountDetails{{AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}}), RoutingDetails: moderntreasury.F([]requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetails{{RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountRoutingDetailsPaymentTypeACH)}}), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), PartyName: moderntreasury.F("string"), PartyIdentifier: moderntreasury.F("string"), PlaidProcessorToken: moderntreasury.F("string"), ContactDetails: moderntreasury.F([]requests.PaymentOrderUpdateParamsReceivingAccountContactDetails{{ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderUpdateParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}})}), LineItems: moderntreasury.F([]requests.PaymentOrderUpdateParamsLineItems{{Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}})},
	)
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestPaymentOrderListWithOptionalParams(t *testing.T) {
	c := moderntreasury.NewModernTreasury(
		option.WithAPIKey("APIKey"),
		option.WithOrganizationID("my-organization-ID"),
		option.WithBaseURL("http://127.0.0.1:4010"),
	)
	_, err := c.PaymentOrders.List(context.TODO(), &requests.PaymentOrderListParams{AfterCursor: moderntreasury.F("string"), PerPage: moderntreasury.F(int64(0)), Type: moderntreasury.F(requests.PaymentOrderListParamsTypeACH), Priority: moderntreasury.F(requests.PaymentOrderListParamsPriorityHigh), CounterpartyID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), OriginatingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), TransactionID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Status: moderntreasury.F(requests.PaymentOrderListParamsStatusApproved), Direction: moderntreasury.F(requests.PaymentOrderListParamsDirectionCredit), ReferenceNumber: moderntreasury.F("string"), EffectiveDateStart: moderntreasury.F(time.Now()), EffectiveDateEnd: moderntreasury.F(time.Now()), Metadata: moderntreasury.F(map[string]string{"foo": "string"})})
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}

func TestPaymentOrderNewAsyncWithOptionalParams(t *testing.T) {
	c := moderntreasury.NewModernTreasury(
		option.WithAPIKey("APIKey"),
		option.WithOrganizationID("my-organization-ID"),
		option.WithBaseURL("http://127.0.0.1:4010"),
	)
	_, err := c.PaymentOrders.NewAsync(context.TODO(), &requests.PaymentOrderNewAsyncParams{Type: moderntreasury.F(requests.PaymentOrderTypeACH), Subtype: moderntreasury.F(requests.PaymentOrderSubtypeCcd), Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewAsyncParamsDirectionCredit), Priority: moderntreasury.F(requests.PaymentOrderNewAsyncParamsPriorityHigh), OriginatingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ReceivingAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Accounting: moderntreasury.F(requests.PaymentOrderNewAsyncParamsAccounting{AccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), ClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")}), AccountingCategoryID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), AccountingLedgerClassID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), Currency: moderntreasury.F(requests.CurrencyAed), EffectiveDate: moderntreasury.F(time.Now()), Description: moderntreasury.F("string"), StatementDescriptor: moderntreasury.F("string"), RemittanceInformation: moderntreasury.F("string"), Purpose: moderntreasury.F("string"), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), ChargeBearer: moderntreasury.F(requests.PaymentOrderNewAsyncParamsChargeBearerShared), ForeignExchangeIndicator: moderntreasury.F(requests.PaymentOrderNewAsyncParamsForeignExchangeIndicatorFixedToVariable), ForeignExchangeContract: moderntreasury.F("string"), NsfProtected: moderntreasury.F(true), OriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyName: moderntreasury.F("string"), UltimateOriginatingPartyIdentifier: moderntreasury.F("string"), UltimateReceivingPartyName: moderntreasury.F("string"), UltimateReceivingPartyIdentifier: moderntreasury.F("string"), SendRemittanceAdvice: moderntreasury.F(true), ExpiresAt: moderntreasury.F(time.Now()), FallbackType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsFallbackTypeACH), ReceivingAccount: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccount{AccountType: moderntreasury.F(requests.ExternalAccountTypeCash), PartyType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountPartyTypeBusiness), PartyAddress: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountPartyAddress{Line1: moderntreasury.F("string"), Line2: moderntreasury.F("string"), Locality: moderntreasury.F("string"), Region: moderntreasury.F("string"), PostalCode: moderntreasury.F("string"), Country: moderntreasury.F("string")}), Name: moderntreasury.F("string"), AccountDetails: moderntreasury.F([]requests.PaymentOrderNewAsyncParamsReceivingAccountAccountDetails{{AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}, {AccountNumber: moderntreasury.F("string"), AccountNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountAccountDetailsAccountNumberTypeIban)}}), RoutingDetails: moderntreasury.F([]requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetails{{RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsPaymentTypeACH)}, {RoutingNumber: moderntreasury.F("string"), RoutingNumberType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsRoutingNumberTypeAba), PaymentType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountRoutingDetailsPaymentTypeACH)}}), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), PartyName: moderntreasury.F("string"), PartyIdentifier: moderntreasury.F("string"), PlaidProcessorToken: moderntreasury.F("string"), ContactDetails: moderntreasury.F([]requests.PaymentOrderNewAsyncParamsReceivingAccountContactDetails{{ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}, {ContactIdentifier: moderntreasury.F("string"), ContactIdentifierType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsReceivingAccountContactDetailsContactIdentifierTypeEmail)}})}), LedgerTransaction: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransaction{Description: moderntreasury.F("string"), Status: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransactionStatusArchived), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), EffectiveDate: moderntreasury.F(time.Now()), LedgerEntries: moderntreasury.F([]requests.PaymentOrderNewAsyncParamsLedgerTransactionLedgerEntries{{Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}, {Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}, {Amount: moderntreasury.F(int64(0)), Direction: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransactionLedgerEntriesDirectionCredit), LedgerAccountID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"), LockVersion: moderntreasury.F(int64(0)), PendingBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), PostedBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), AvailableBalanceAmount: moderntreasury.F(map[string]int64{"foo": int64(0)}), ShowResultingLedgerAccountBalances: moderntreasury.F(true)}}), ExternalID: moderntreasury.F("string"), LedgerableType: moderntreasury.F(requests.PaymentOrderNewAsyncParamsLedgerTransactionLedgerableTypeCounterparty), LedgerableID: moderntreasury.F("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")}), LineItems: moderntreasury.F([]requests.PaymentOrderNewAsyncParamsLineItems{{Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}, {Amount: moderntreasury.F(int64(0)), Metadata: moderntreasury.F(map[string]string{"key": "value", "foo": "bar", "modern": "treasury"}), Description: moderntreasury.F("string"), AccountingCategoryID: moderntreasury.F("string")}}), TransactionMonitoringEnabled: moderntreasury.F(true)})
	if err != nil {
		var apiError core.APIError
		if errors.As(err, &apiError) {
			body, _ := httputil.DumpRequest(apiError.Request(), true)
			println(string(body))
		}
		t.Fatalf("err should be nil: %s", err.Error())
	}
}
