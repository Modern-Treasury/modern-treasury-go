// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package moderntreasury

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"reflect"
	"time"

	"github.com/Modern-Treasury/modern-treasury-go/v2/internal/apijson"
	"github.com/Modern-Treasury/modern-treasury-go/v2/internal/apiquery"
	"github.com/Modern-Treasury/modern-treasury-go/v2/internal/pagination"
	"github.com/Modern-Treasury/modern-treasury-go/v2/internal/param"
	"github.com/Modern-Treasury/modern-treasury-go/v2/internal/requestconfig"
	"github.com/Modern-Treasury/modern-treasury-go/v2/option"
	"github.com/Modern-Treasury/modern-treasury-go/v2/shared"
	"github.com/tidwall/gjson"
)

// BulkResultService contains methods and other services that help with interacting
// with the Modern Treasury API. Note, unlike clients, this service does not read
// variables from the environment automatically. You should not instantiate this
// service directly, and instead use the [NewBulkResultService] method instead.
type BulkResultService struct {
	Options []option.RequestOption
}

// NewBulkResultService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewBulkResultService(opts ...option.RequestOption) (r *BulkResultService) {
	r = &BulkResultService{}
	r.Options = opts
	return
}

// get bulk_result
func (r *BulkResultService) Get(ctx context.Context, id string, opts ...option.RequestOption) (res *BulkResult, err error) {
	opts = append(r.Options[:], opts...)
	path := fmt.Sprintf("api/bulk_results/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// list bulk_results
func (r *BulkResultService) List(ctx context.Context, query BulkResultListParams, opts ...option.RequestOption) (res *pagination.Page[BulkResult], err error) {
	var raw *http.Response
	opts = append(r.Options, opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "api/bulk_results"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// list bulk_results
func (r *BulkResultService) ListAutoPaging(ctx context.Context, query BulkResultListParams, opts ...option.RequestOption) *pagination.PageAutoPager[BulkResult] {
	return pagination.NewPageAutoPager(r.List(ctx, query, opts...))
}

type BulkResult struct {
	ID        string    `json:"id,required" format:"uuid"`
	CreatedAt time.Time `json:"created_at,required" format:"date-time"`
	// An object with type as indicated by `entity_type`. This is the result object
	// that is generated by performing the requested action on the provided input
	// `request_params`.
	Entity BulkResultEntity `json:"entity,required"`
	// Unique identifier for the result entity object.
	EntityID string `json:"entity_id,required" format:"uuid"`
	// The type of the result entity object. For a successful bulk result, this is the
	// same as the `resource_type` of the bulk request. For a failed bulk result, this
	// is always bulk_error
	EntityType BulkResultEntityType `json:"entity_type,required"`
	// This field will be true if this object exists in the live environment or false
	// if it exists in the test environment.
	LiveMode bool   `json:"live_mode,required"`
	Object   string `json:"object,required"`
	// Unique identifier for the request that created this bulk result. This is the ID
	// of the bulk request when `request_type` is bulk_request
	RequestID string `json:"request_id,required" format:"uuid"`
	// An optional object that contains the provided input params for the request that
	// created this result. This is an item in the `resources` array for the
	// bulk_request
	RequestParams map[string]string `json:"request_params,required,nullable"`
	// The type of the request that created this result. bulk_request is the only
	// supported `request_type`
	RequestType BulkResultRequestType `json:"request_type,required"`
	// One of successful or failed.
	Status    BulkResultStatus `json:"status,required"`
	UpdatedAt time.Time        `json:"updated_at,required" format:"date-time"`
	JSON      bulkResultJSON   `json:"-"`
}

// bulkResultJSON contains the JSON metadata for the struct [BulkResult]
type bulkResultJSON struct {
	ID            apijson.Field
	CreatedAt     apijson.Field
	Entity        apijson.Field
	EntityID      apijson.Field
	EntityType    apijson.Field
	LiveMode      apijson.Field
	Object        apijson.Field
	RequestID     apijson.Field
	RequestParams apijson.Field
	RequestType   apijson.Field
	Status        apijson.Field
	UpdatedAt     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *BulkResult) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r bulkResultJSON) RawJSON() string {
	return r.raw
}

// An object with type as indicated by `entity_type`. This is the result object
// that is generated by performing the requested action on the provided input
// `request_params`.
type BulkResultEntity struct {
	ID     string `json:"id,required" format:"uuid"`
	Object string `json:"object,required"`
	// This field will be true if this object exists in the live environment or false
	// if it exists in the test environment.
	LiveMode  bool      `json:"live_mode,required"`
	CreatedAt time.Time `json:"created_at,required" format:"date-time"`
	UpdatedAt time.Time `json:"updated_at,required" format:"date-time"`
	// One of `ach`, `bankgirot`, `eft`, `wire`, `check`, `sen`, `book`, `rtp`, `sepa`,
	// `bacs`, `au_becs`, `interac`, `neft`, `nics`, `nz_national_clearing_code`,
	// `sic`, `signet`, `provexchange`, `zengin`.
	Type PaymentOrderType `json:"type,nullable"`
	// An additional layer of classification for the type of payment order you are
	// doing. This field is only used for `ach` payment orders currently. For `ach`
	// payment orders, the `subtype` represents the SEC code. We currently support
	// `CCD`, `PPD`, `IAT`, `CTX`, `WEB`, `CIE`, and `TEL`.
	Subtype PaymentOrderSubtype `json:"subtype,nullable"`
	// Value in specified currency's smallest unit. e.g. $10 would be represented as
	// 1000 (cents). For RTP, the maximum amount allowed by the network is $100,000.
	Amount int64 `json:"amount"`
	// One of `credit`, `debit`. Describes the direction money is flowing in the
	// transaction. A `credit` moves money from your account to someone else's. A
	// `debit` pulls money from someone else's account to your own. Note that wire,
	// rtp, and check payments will always be `credit`.
	Direction string `json:"direction"`
	// Either `normal` or `high`. For ACH and EFT payments, `high` represents a
	// same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
	// an overnight check rather than standard mail.
	Priority BulkResultEntityPriority `json:"priority"`
	// The ID of one of your organization's internal accounts.
	OriginatingAccountID string `json:"originating_account_id" format:"uuid"`
	// The receiving account ID. Can be an `external_account` or `internal_account`.
	ReceivingAccountID string      `json:"receiving_account_id" format:"uuid"`
	Accounting         interface{} `json:"accounting,required"`
	// The ID of one of your accounting categories. Note that these will only be
	// accessible if your accounting system has been connected.
	AccountingCategoryID string `json:"accounting_category_id,nullable" format:"uuid"`
	// The ID of one of your accounting ledger classes. Note that these will only be
	// accessible if your accounting system has been connected.
	AccountingLedgerClassID string `json:"accounting_ledger_class_id,nullable" format:"uuid"`
	// Defaults to the currency of the originating account.
	Currency shared.Currency `json:"currency,nullable"`
	// Date transactions are to be posted to the participants' account. Defaults to the
	// current business day or the next business day if the current day is a bank
	// holiday or weekend. Format: yyyy-mm-dd.
	EffectiveDate time.Time `json:"effective_date" format:"date"`
	// An optional description for internal use.
	Description string `json:"description,nullable"`
	// An optional descriptor which will appear in the receiver's statement. For
	// `check` payments this field will be used as the memo line. For `ach` the maximum
	// length is 10 characters. Note that for ACH payments, the name on your bank
	// account will be included automatically by the bank, so you can use the
	// characters for other useful information. For `eft` the maximum length is 15
	// characters.
	StatementDescriptor string `json:"statement_descriptor,nullable"`
	// For `ach`, this field will be passed through on an addenda record. For `wire`
	// payments the field will be passed through as the "Originator to Beneficiary
	// Information", also known as OBI or Fedwire tag 6000.
	RemittanceInformation string `json:"remittance_information,nullable"`
	// If present, Modern Treasury will not process the payment until after this time.
	// If `process_after` is past the cutoff for `effective_date`, `process_after` will
	// take precedence and `effective_date` will automatically update to reflect the
	// earliest possible sending date after `process_after`. Format is ISO8601
	// timestamp.
	ProcessAfter time.Time `json:"process_after,nullable" format:"date-time"`
	// For `wire`, this is usually the purpose which is transmitted via the
	// "InstrForDbtrAgt" field in the ISO20022 file. If you are using Currencycloud,
	// this is the `payment.purpose_code` field. For `eft`, this field is the 3 digit
	// CPA Code that will be attached to the payment.
	Purpose  string      `json:"purpose,nullable"`
	Metadata interface{} `json:"metadata,required"`
	// The party that will pay the fees for the payment order. Only applies to wire
	// payment orders. Can be one of shared, sender, or receiver, which correspond
	// respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
	ChargeBearer BulkResultEntityChargeBearer `json:"charge_bearer,nullable"`
	// Indicates the type of FX transfer to initiate, can be either
	// `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
	// currency matches the originating account currency.
	ForeignExchangeIndicator BulkResultEntityForeignExchangeIndicator `json:"foreign_exchange_indicator,nullable"`
	// If present, indicates a specific foreign exchange contract number that has been
	// generated by your financial institution.
	ForeignExchangeContract string `json:"foreign_exchange_contract,nullable"`
	// A boolean to determine if NSF Protection is enabled for this payment order. Note
	// that this setting must also be turned on in your organization settings page.
	NsfProtected bool `json:"nsf_protected"`
	// If present, this will replace your default company name on receiver's bank
	// statement. This field can only be used for ACH payments currently. For ACH, only
	// the first 16 characters of this string will be used. Any additional characters
	// will be truncated.
	OriginatingPartyName string `json:"originating_party_name,nullable"`
	// Name of the ultimate originator of the payment order.
	UltimateOriginatingPartyName string `json:"ultimate_originating_party_name,nullable"`
	// Identifier of the ultimate originator of the payment order.
	UltimateOriginatingPartyIdentifier string `json:"ultimate_originating_party_identifier,nullable"`
	UltimateReceivingPartyName         string `json:"ultimate_receiving_party_name,nullable"`
	UltimateReceivingPartyIdentifier   string `json:"ultimate_receiving_party_identifier,nullable"`
	// Send an email to the counterparty when the payment order is sent to the bank. If
	// `null`, `send_remittance_advice` on the Counterparty is used.
	SendRemittanceAdvice bool `json:"send_remittance_advice,nullable"`
	// RFP payments require an expires_at. This value must be past the effective_date.
	ExpiresAt time.Time `json:"expires_at,nullable" format:"date-time"`
	// The current status of the payment order.
	Status                     BulkResultEntityStatus               `json:"status"`
	ReceivingAccountType       BulkResultEntityReceivingAccountType `json:"receiving_account_type"`
	UltimateOriginatingAccount interface{}                          `json:"ultimate_originating_account,required"`
	// The ultimate originating account ID. Can be a `virtual_account` or
	// `internal_account`.
	UltimateOriginatingAccountID   string                                         `json:"ultimate_originating_account_id,nullable" format:"uuid"`
	UltimateOriginatingAccountType BulkResultEntityUltimateOriginatingAccountType `json:"ultimate_originating_account_type,nullable"`
	// If the payment order is tied to a specific Counterparty, their id will appear,
	// otherwise `null`.
	CounterpartyID string      `json:"counterparty_id,nullable" format:"uuid"`
	TransactionIDs interface{} `json:"transaction_ids,required"`
	// The ID of the ledger transaction linked to the payment order.
	LedgerTransactionID string `json:"ledger_transaction_id,nullable" format:"uuid"`
	// If the payment order's status is `returned`, this will include the return
	// object's data.
	CurrentReturn ReturnObject `json:"current_return,nullable"`
	// A flag that determines whether a payment order should go through transaction
	// monitoring.
	TransactionMonitoringEnabled bool        `json:"transaction_monitoring_enabled"`
	ComplianceRuleMetadata       interface{} `json:"compliance_rule_metadata,required"`
	ReferenceNumbers             interface{} `json:"reference_numbers,required"`
	// This field will be populated if a vendor (e.g. Currencycloud) failure occurs.
	// Logic shouldn't be built on its value as it is free-form.
	VendorFailureReason string `json:"vendor_failure_reason,nullable"`
	// The ID of the compliance decision for the payment order, if transaction
	// monitoring is enabled.
	DecisionID          string      `json:"decision_id,nullable" format:"uuid"`
	ForeignExchangeRate interface{} `json:"foreign_exchange_rate,required"`
	// The highest amount this expected payment may be equal to. Value in specified
	// currency's smallest unit. e.g. $10 would be represented as 1000.
	AmountUpperBound int64 `json:"amount_upper_bound"`
	// The lowest amount this expected payment may be equal to. Value in specified
	// currency's smallest unit. e.g. $10 would be represented as 1000.
	AmountLowerBound int64 `json:"amount_lower_bound"`
	// The ID of the Internal Account for the expected payment.
	InternalAccountID string `json:"internal_account_id" format:"uuid"`
	// The latest date the payment may come in. Format: yyyy-mm-dd
	DateUpperBound time.Time `json:"date_upper_bound,nullable" format:"date"`
	// The earliest date the payment may come in. Format: yyyy-mm-dd
	DateLowerBound              time.Time   `json:"date_lower_bound,nullable" format:"date"`
	ReconciliationGroups        interface{} `json:"reconciliation_groups,required"`
	ReconciliationFilters       interface{} `json:"reconciliation_filters,required"`
	ReconciliationRuleVariables interface{} `json:"reconciliation_rule_variables,required"`
	// The ID of the Transaction this expected payment object has been matched to.
	TransactionID string `json:"transaction_id,nullable" format:"uuid"`
	// The ID of the Transaction Line Item this expected payment has been matched to.
	TransactionLineItemID string `json:"transaction_line_item_id,nullable" format:"uuid"`
	// One of manual if this expected payment was manually reconciled in the dashboard,
	// automatic if it was automatically reconciled by Modern Treasury, or null if it
	// is unreconciled.
	ReconciliationMethod BulkResultEntityReconciliationMethod `json:"reconciliation_method,nullable"`
	// The timestamp (ISO8601 format) at which the ledger transaction happened for
	// reporting purposes.
	EffectiveAt   time.Time   `json:"effective_at" format:"date-time"`
	LedgerEntries interface{} `json:"ledger_entries,required"`
	// The time on which the ledger transaction posted. This is null if the ledger
	// transaction is pending.
	PostedAt time.Time `json:"posted_at,nullable" format:"date-time"`
	// The ID of the ledger this ledger transaction belongs to.
	LedgerID string `json:"ledger_id" format:"uuid"`
	// If the ledger transaction can be reconciled to another object in Modern
	// Treasury, the type will be populated here, otherwise null. This can be one of
	// payment_order, incoming_payment_detail, expected_payment, return, paper_item, or
	// reversal.
	LedgerableType BulkResultEntityLedgerableType `json:"ledgerable_type,nullable"`
	// If the ledger transaction can be reconciled to another object in Modern
	// Treasury, the id will be populated here, otherwise null.
	LedgerableID string `json:"ledgerable_id,nullable" format:"uuid"`
	// A unique string to represent the ledger transaction. Only one pending or posted
	// ledger transaction may have this ID in the ledger.
	ExternalID string `json:"external_id,nullable"`
	// The ID of the original ledger transaction that this ledger transaction reverses.
	ReversesLedgerTransactionID string `json:"reverses_ledger_transaction_id,nullable"`
	// The ID of the ledger transaction that reversed this ledger transaction.
	ReversedByLedgerTransactionID string    `json:"reversed_by_ledger_transaction_id,nullable"`
	DiscardedAt                   time.Time `json:"discarded_at,nullable" format:"date-time"`
	// The transaction detail text that often appears in on your bank statement and in
	// your banking portal.
	VendorDescription string `json:"vendor_description,nullable"`
	// When applicable, the bank-given code that determines the transaction's category.
	// For most banks this is the BAI2/BTRS transaction code.
	VendorCode string `json:"vendor_code,nullable"`
	// The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`,
	// `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`,
	// `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`,
	// `swift`, `us_bank`, or others.
	VendorCodeType BulkResultEntityVendorCodeType `json:"vendor_code_type,nullable"`
	// An identifier given to this transaction by the bank.
	VendorID string `json:"vendor_id,nullable"`
	// The date on which the transaction occurred.
	AsOfDate time.Time `json:"as_of_date,nullable" format:"date"`
	// The time on which the transaction occurred. Depending on the granularity of the
	// timestamp information received from the bank, it may be `null`.
	AsOfTime string `json:"as_of_time,nullable" format:"time"`
	// This field will be `true` if the transaction has posted to the account.
	Posted bool `json:"posted"`
	// An identifier given to this transaction by the bank, often `null`.
	VendorCustomerID string `json:"vendor_customer_id,nullable"`
	// This field will be `true` if a transaction is reconciled by the Modern Treasury
	// system. This means that it has transaction line items that sum up to the
	// transaction's amount.
	Reconciled    bool                 `json:"reconciled"`
	Details       interface{}          `json:"details,required"`
	RequestErrors interface{}          `json:"request_errors,required"`
	JSON          bulkResultEntityJSON `json:"-"`
	union         BulkResultEntityUnion
}

// bulkResultEntityJSON contains the JSON metadata for the struct
// [BulkResultEntity]
type bulkResultEntityJSON struct {
	ID                                 apijson.Field
	Object                             apijson.Field
	LiveMode                           apijson.Field
	CreatedAt                          apijson.Field
	UpdatedAt                          apijson.Field
	Type                               apijson.Field
	Subtype                            apijson.Field
	Amount                             apijson.Field
	Direction                          apijson.Field
	Priority                           apijson.Field
	OriginatingAccountID               apijson.Field
	ReceivingAccountID                 apijson.Field
	Accounting                         apijson.Field
	AccountingCategoryID               apijson.Field
	AccountingLedgerClassID            apijson.Field
	Currency                           apijson.Field
	EffectiveDate                      apijson.Field
	Description                        apijson.Field
	StatementDescriptor                apijson.Field
	RemittanceInformation              apijson.Field
	ProcessAfter                       apijson.Field
	Purpose                            apijson.Field
	Metadata                           apijson.Field
	ChargeBearer                       apijson.Field
	ForeignExchangeIndicator           apijson.Field
	ForeignExchangeContract            apijson.Field
	NsfProtected                       apijson.Field
	OriginatingPartyName               apijson.Field
	UltimateOriginatingPartyName       apijson.Field
	UltimateOriginatingPartyIdentifier apijson.Field
	UltimateReceivingPartyName         apijson.Field
	UltimateReceivingPartyIdentifier   apijson.Field
	SendRemittanceAdvice               apijson.Field
	ExpiresAt                          apijson.Field
	Status                             apijson.Field
	ReceivingAccountType               apijson.Field
	UltimateOriginatingAccount         apijson.Field
	UltimateOriginatingAccountID       apijson.Field
	UltimateOriginatingAccountType     apijson.Field
	CounterpartyID                     apijson.Field
	TransactionIDs                     apijson.Field
	LedgerTransactionID                apijson.Field
	CurrentReturn                      apijson.Field
	TransactionMonitoringEnabled       apijson.Field
	ComplianceRuleMetadata             apijson.Field
	ReferenceNumbers                   apijson.Field
	VendorFailureReason                apijson.Field
	DecisionID                         apijson.Field
	ForeignExchangeRate                apijson.Field
	AmountUpperBound                   apijson.Field
	AmountLowerBound                   apijson.Field
	InternalAccountID                  apijson.Field
	DateUpperBound                     apijson.Field
	DateLowerBound                     apijson.Field
	ReconciliationGroups               apijson.Field
	ReconciliationFilters              apijson.Field
	ReconciliationRuleVariables        apijson.Field
	TransactionID                      apijson.Field
	TransactionLineItemID              apijson.Field
	ReconciliationMethod               apijson.Field
	EffectiveAt                        apijson.Field
	LedgerEntries                      apijson.Field
	PostedAt                           apijson.Field
	LedgerID                           apijson.Field
	LedgerableType                     apijson.Field
	LedgerableID                       apijson.Field
	ExternalID                         apijson.Field
	ReversesLedgerTransactionID        apijson.Field
	ReversedByLedgerTransactionID      apijson.Field
	DiscardedAt                        apijson.Field
	VendorDescription                  apijson.Field
	VendorCode                         apijson.Field
	VendorCodeType                     apijson.Field
	VendorID                           apijson.Field
	AsOfDate                           apijson.Field
	AsOfTime                           apijson.Field
	Posted                             apijson.Field
	VendorCustomerID                   apijson.Field
	Reconciled                         apijson.Field
	Details                            apijson.Field
	RequestErrors                      apijson.Field
	raw                                string
	ExtraFields                        map[string]apijson.Field
}

func (r bulkResultEntityJSON) RawJSON() string {
	return r.raw
}

func (r *BulkResultEntity) UnmarshalJSON(data []byte) (err error) {
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

func (r BulkResultEntity) AsUnion() BulkResultEntityUnion {
	return r.union
}

// An object with type as indicated by `entity_type`. This is the result object
// that is generated by performing the requested action on the provided input
// `request_params`.
//
// Union satisfied by [PaymentOrder], [ExpectedPayment], [LedgerTransaction],
// [Transaction] or [BulkResultEntityBulkError].
type BulkResultEntityUnion interface {
	implementsBulkResultEntity()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*BulkResultEntityUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(PaymentOrder{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(ExpectedPayment{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(LedgerTransaction{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(Transaction{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(BulkResultEntityBulkError{}),
		},
	)
}

type BulkResultEntityBulkError struct {
	ID        string    `json:"id,required" format:"uuid"`
	CreatedAt time.Time `json:"created_at,required" format:"date-time"`
	// This field will be true if this object exists in the live environment or false
	// if it exists in the test environment.
	LiveMode      bool                                    `json:"live_mode,required"`
	Object        string                                  `json:"object,required"`
	RequestErrors []BulkResultEntityBulkErrorRequestError `json:"request_errors,required"`
	UpdatedAt     time.Time                               `json:"updated_at,required" format:"date-time"`
	JSON          bulkResultEntityBulkErrorJSON           `json:"-"`
}

// bulkResultEntityBulkErrorJSON contains the JSON metadata for the struct
// [BulkResultEntityBulkError]
type bulkResultEntityBulkErrorJSON struct {
	ID            apijson.Field
	CreatedAt     apijson.Field
	LiveMode      apijson.Field
	Object        apijson.Field
	RequestErrors apijson.Field
	UpdatedAt     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *BulkResultEntityBulkError) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r bulkResultEntityBulkErrorJSON) RawJSON() string {
	return r.raw
}

func (r BulkResultEntityBulkError) implementsBulkResultEntity() {}

type BulkResultEntityBulkErrorRequestError struct {
	Code      string                                    `json:"code"`
	Message   string                                    `json:"message"`
	Parameter string                                    `json:"parameter"`
	JSON      bulkResultEntityBulkErrorRequestErrorJSON `json:"-"`
}

// bulkResultEntityBulkErrorRequestErrorJSON contains the JSON metadata for the
// struct [BulkResultEntityBulkErrorRequestError]
type bulkResultEntityBulkErrorRequestErrorJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	Parameter   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *BulkResultEntityBulkErrorRequestError) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r bulkResultEntityBulkErrorRequestErrorJSON) RawJSON() string {
	return r.raw
}

// Either `normal` or `high`. For ACH and EFT payments, `high` represents a
// same-day ACH or EFT transfer, respectively. For check payments, `high` can mean
// an overnight check rather than standard mail.
type BulkResultEntityPriority string

const (
	BulkResultEntityPriorityHigh   BulkResultEntityPriority = "high"
	BulkResultEntityPriorityNormal BulkResultEntityPriority = "normal"
)

func (r BulkResultEntityPriority) IsKnown() bool {
	switch r {
	case BulkResultEntityPriorityHigh, BulkResultEntityPriorityNormal:
		return true
	}
	return false
}

// The party that will pay the fees for the payment order. Only applies to wire
// payment orders. Can be one of shared, sender, or receiver, which correspond
// respectively with the SWIFT 71A values `SHA`, `OUR`, `BEN`.
type BulkResultEntityChargeBearer string

const (
	BulkResultEntityChargeBearerShared   BulkResultEntityChargeBearer = "shared"
	BulkResultEntityChargeBearerSender   BulkResultEntityChargeBearer = "sender"
	BulkResultEntityChargeBearerReceiver BulkResultEntityChargeBearer = "receiver"
)

func (r BulkResultEntityChargeBearer) IsKnown() bool {
	switch r {
	case BulkResultEntityChargeBearerShared, BulkResultEntityChargeBearerSender, BulkResultEntityChargeBearerReceiver:
		return true
	}
	return false
}

// Indicates the type of FX transfer to initiate, can be either
// `variable_to_fixed`, `fixed_to_variable`, or `null` if the payment order
// currency matches the originating account currency.
type BulkResultEntityForeignExchangeIndicator string

const (
	BulkResultEntityForeignExchangeIndicatorFixedToVariable BulkResultEntityForeignExchangeIndicator = "fixed_to_variable"
	BulkResultEntityForeignExchangeIndicatorVariableToFixed BulkResultEntityForeignExchangeIndicator = "variable_to_fixed"
)

func (r BulkResultEntityForeignExchangeIndicator) IsKnown() bool {
	switch r {
	case BulkResultEntityForeignExchangeIndicatorFixedToVariable, BulkResultEntityForeignExchangeIndicatorVariableToFixed:
		return true
	}
	return false
}

// The current status of the payment order.
type BulkResultEntityStatus string

const (
	BulkResultEntityStatusApproved            BulkResultEntityStatus = "approved"
	BulkResultEntityStatusCancelled           BulkResultEntityStatus = "cancelled"
	BulkResultEntityStatusCompleted           BulkResultEntityStatus = "completed"
	BulkResultEntityStatusDenied              BulkResultEntityStatus = "denied"
	BulkResultEntityStatusFailed              BulkResultEntityStatus = "failed"
	BulkResultEntityStatusNeedsApproval       BulkResultEntityStatus = "needs_approval"
	BulkResultEntityStatusPending             BulkResultEntityStatus = "pending"
	BulkResultEntityStatusProcessing          BulkResultEntityStatus = "processing"
	BulkResultEntityStatusReturned            BulkResultEntityStatus = "returned"
	BulkResultEntityStatusReversed            BulkResultEntityStatus = "reversed"
	BulkResultEntityStatusSent                BulkResultEntityStatus = "sent"
	BulkResultEntityStatusArchived            BulkResultEntityStatus = "archived"
	BulkResultEntityStatusPartiallyReconciled BulkResultEntityStatus = "partially_reconciled"
	BulkResultEntityStatusReconciled          BulkResultEntityStatus = "reconciled"
	BulkResultEntityStatusUnreconciled        BulkResultEntityStatus = "unreconciled"
	BulkResultEntityStatusPosted              BulkResultEntityStatus = "posted"
)

func (r BulkResultEntityStatus) IsKnown() bool {
	switch r {
	case BulkResultEntityStatusApproved, BulkResultEntityStatusCancelled, BulkResultEntityStatusCompleted, BulkResultEntityStatusDenied, BulkResultEntityStatusFailed, BulkResultEntityStatusNeedsApproval, BulkResultEntityStatusPending, BulkResultEntityStatusProcessing, BulkResultEntityStatusReturned, BulkResultEntityStatusReversed, BulkResultEntityStatusSent, BulkResultEntityStatusArchived, BulkResultEntityStatusPartiallyReconciled, BulkResultEntityStatusReconciled, BulkResultEntityStatusUnreconciled, BulkResultEntityStatusPosted:
		return true
	}
	return false
}

type BulkResultEntityReceivingAccountType string

const (
	BulkResultEntityReceivingAccountTypeInternalAccount BulkResultEntityReceivingAccountType = "internal_account"
	BulkResultEntityReceivingAccountTypeExternalAccount BulkResultEntityReceivingAccountType = "external_account"
)

func (r BulkResultEntityReceivingAccountType) IsKnown() bool {
	switch r {
	case BulkResultEntityReceivingAccountTypeInternalAccount, BulkResultEntityReceivingAccountTypeExternalAccount:
		return true
	}
	return false
}

type BulkResultEntityUltimateOriginatingAccountType string

const (
	BulkResultEntityUltimateOriginatingAccountTypeInternalAccount BulkResultEntityUltimateOriginatingAccountType = "internal_account"
	BulkResultEntityUltimateOriginatingAccountTypeVirtualAccount  BulkResultEntityUltimateOriginatingAccountType = "virtual_account"
)

func (r BulkResultEntityUltimateOriginatingAccountType) IsKnown() bool {
	switch r {
	case BulkResultEntityUltimateOriginatingAccountTypeInternalAccount, BulkResultEntityUltimateOriginatingAccountTypeVirtualAccount:
		return true
	}
	return false
}

// One of manual if this expected payment was manually reconciled in the dashboard,
// automatic if it was automatically reconciled by Modern Treasury, or null if it
// is unreconciled.
type BulkResultEntityReconciliationMethod string

const (
	BulkResultEntityReconciliationMethodAutomatic BulkResultEntityReconciliationMethod = "automatic"
	BulkResultEntityReconciliationMethodManual    BulkResultEntityReconciliationMethod = "manual"
)

func (r BulkResultEntityReconciliationMethod) IsKnown() bool {
	switch r {
	case BulkResultEntityReconciliationMethodAutomatic, BulkResultEntityReconciliationMethodManual:
		return true
	}
	return false
}

// If the ledger transaction can be reconciled to another object in Modern
// Treasury, the type will be populated here, otherwise null. This can be one of
// payment_order, incoming_payment_detail, expected_payment, return, paper_item, or
// reversal.
type BulkResultEntityLedgerableType string

const (
	BulkResultEntityLedgerableTypeExpectedPayment       BulkResultEntityLedgerableType = "expected_payment"
	BulkResultEntityLedgerableTypeIncomingPaymentDetail BulkResultEntityLedgerableType = "incoming_payment_detail"
	BulkResultEntityLedgerableTypePaperItem             BulkResultEntityLedgerableType = "paper_item"
	BulkResultEntityLedgerableTypePaymentOrder          BulkResultEntityLedgerableType = "payment_order"
	BulkResultEntityLedgerableTypeReturn                BulkResultEntityLedgerableType = "return"
	BulkResultEntityLedgerableTypeReversal              BulkResultEntityLedgerableType = "reversal"
)

func (r BulkResultEntityLedgerableType) IsKnown() bool {
	switch r {
	case BulkResultEntityLedgerableTypeExpectedPayment, BulkResultEntityLedgerableTypeIncomingPaymentDetail, BulkResultEntityLedgerableTypePaperItem, BulkResultEntityLedgerableTypePaymentOrder, BulkResultEntityLedgerableTypeReturn, BulkResultEntityLedgerableTypeReversal:
		return true
	}
	return false
}

// The type of `vendor_code` being reported. Can be one of `bai2`, `bankprov`,
// `bnk_dev`, `cleartouch`, `currencycloud`, `cross_river`, `dc_bank`, `dwolla`,
// `evolve`, `goldman_sachs`, `iso20022`, `jpmc`, `mx`, `signet`, `silvergate`,
// `swift`, `us_bank`, or others.
type BulkResultEntityVendorCodeType string

const (
	BulkResultEntityVendorCodeTypeBai2          BulkResultEntityVendorCodeType = "bai2"
	BulkResultEntityVendorCodeTypeBankprov      BulkResultEntityVendorCodeType = "bankprov"
	BulkResultEntityVendorCodeTypeBnkDev        BulkResultEntityVendorCodeType = "bnk_dev"
	BulkResultEntityVendorCodeTypeCleartouch    BulkResultEntityVendorCodeType = "cleartouch"
	BulkResultEntityVendorCodeTypeColumn        BulkResultEntityVendorCodeType = "column"
	BulkResultEntityVendorCodeTypeCrossRiver    BulkResultEntityVendorCodeType = "cross_river"
	BulkResultEntityVendorCodeTypeCurrencycloud BulkResultEntityVendorCodeType = "currencycloud"
	BulkResultEntityVendorCodeTypeDcBank        BulkResultEntityVendorCodeType = "dc_bank"
	BulkResultEntityVendorCodeTypeDwolla        BulkResultEntityVendorCodeType = "dwolla"
	BulkResultEntityVendorCodeTypeEvolve        BulkResultEntityVendorCodeType = "evolve"
	BulkResultEntityVendorCodeTypeGoldmanSachs  BulkResultEntityVendorCodeType = "goldman_sachs"
	BulkResultEntityVendorCodeTypeIso20022      BulkResultEntityVendorCodeType = "iso20022"
	BulkResultEntityVendorCodeTypeJpmc          BulkResultEntityVendorCodeType = "jpmc"
	BulkResultEntityVendorCodeTypeMx            BulkResultEntityVendorCodeType = "mx"
	BulkResultEntityVendorCodeTypePlaid         BulkResultEntityVendorCodeType = "plaid"
	BulkResultEntityVendorCodeTypeRspecVendor   BulkResultEntityVendorCodeType = "rspec_vendor"
	BulkResultEntityVendorCodeTypeSignet        BulkResultEntityVendorCodeType = "signet"
	BulkResultEntityVendorCodeTypeSilvergate    BulkResultEntityVendorCodeType = "silvergate"
	BulkResultEntityVendorCodeTypeSwift         BulkResultEntityVendorCodeType = "swift"
	BulkResultEntityVendorCodeTypeUsBank        BulkResultEntityVendorCodeType = "us_bank"
	BulkResultEntityVendorCodeTypeUser          BulkResultEntityVendorCodeType = "user"
)

func (r BulkResultEntityVendorCodeType) IsKnown() bool {
	switch r {
	case BulkResultEntityVendorCodeTypeBai2, BulkResultEntityVendorCodeTypeBankprov, BulkResultEntityVendorCodeTypeBnkDev, BulkResultEntityVendorCodeTypeCleartouch, BulkResultEntityVendorCodeTypeColumn, BulkResultEntityVendorCodeTypeCrossRiver, BulkResultEntityVendorCodeTypeCurrencycloud, BulkResultEntityVendorCodeTypeDcBank, BulkResultEntityVendorCodeTypeDwolla, BulkResultEntityVendorCodeTypeEvolve, BulkResultEntityVendorCodeTypeGoldmanSachs, BulkResultEntityVendorCodeTypeIso20022, BulkResultEntityVendorCodeTypeJpmc, BulkResultEntityVendorCodeTypeMx, BulkResultEntityVendorCodeTypePlaid, BulkResultEntityVendorCodeTypeRspecVendor, BulkResultEntityVendorCodeTypeSignet, BulkResultEntityVendorCodeTypeSilvergate, BulkResultEntityVendorCodeTypeSwift, BulkResultEntityVendorCodeTypeUsBank, BulkResultEntityVendorCodeTypeUser:
		return true
	}
	return false
}

// The type of the result entity object. For a successful bulk result, this is the
// same as the `resource_type` of the bulk request. For a failed bulk result, this
// is always bulk_error
type BulkResultEntityType string

const (
	BulkResultEntityTypePaymentOrder      BulkResultEntityType = "payment_order"
	BulkResultEntityTypeLedgerTransaction BulkResultEntityType = "ledger_transaction"
	BulkResultEntityTypeTransaction       BulkResultEntityType = "transaction"
	BulkResultEntityTypeExpectedPayment   BulkResultEntityType = "expected_payment"
	BulkResultEntityTypeBulkError         BulkResultEntityType = "bulk_error"
)

func (r BulkResultEntityType) IsKnown() bool {
	switch r {
	case BulkResultEntityTypePaymentOrder, BulkResultEntityTypeLedgerTransaction, BulkResultEntityTypeTransaction, BulkResultEntityTypeExpectedPayment, BulkResultEntityTypeBulkError:
		return true
	}
	return false
}

// The type of the request that created this result. bulk_request is the only
// supported `request_type`
type BulkResultRequestType string

const (
	BulkResultRequestTypeBulkRequest BulkResultRequestType = "bulk_request"
)

func (r BulkResultRequestType) IsKnown() bool {
	switch r {
	case BulkResultRequestTypeBulkRequest:
		return true
	}
	return false
}

// One of successful or failed.
type BulkResultStatus string

const (
	BulkResultStatusPending    BulkResultStatus = "pending"
	BulkResultStatusSuccessful BulkResultStatus = "successful"
	BulkResultStatusFailed     BulkResultStatus = "failed"
)

func (r BulkResultStatus) IsKnown() bool {
	switch r {
	case BulkResultStatusPending, BulkResultStatusSuccessful, BulkResultStatusFailed:
		return true
	}
	return false
}

type BulkResultListParams struct {
	AfterCursor param.Field[string] `query:"after_cursor"`
	// Unique identifier for the result entity object.
	EntityID param.Field[string] `query:"entity_id"`
	// The type of the request that created this result. bulk_request is the only
	// supported `request_type`
	EntityType param.Field[BulkResultListParamsEntityType] `query:"entity_type"`
	PerPage    param.Field[int64]                          `query:"per_page"`
	// Unique identifier for the request that created this bulk result. This is the ID
	// of the bulk request when `request_type` is bulk_request
	RequestID param.Field[string] `query:"request_id"`
	// The type of the request that created this result. bulk_request is the only
	// supported `request_type`
	RequestType param.Field[BulkResultListParamsRequestType] `query:"request_type"`
	// One of successful or failed.
	Status param.Field[BulkResultListParamsStatus] `query:"status"`
}

// URLQuery serializes [BulkResultListParams]'s query parameters as `url.Values`.
func (r BulkResultListParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatBrackets,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

// The type of the request that created this result. bulk_request is the only
// supported `request_type`
type BulkResultListParamsEntityType string

const (
	BulkResultListParamsEntityTypePaymentOrder      BulkResultListParamsEntityType = "payment_order"
	BulkResultListParamsEntityTypeLedgerTransaction BulkResultListParamsEntityType = "ledger_transaction"
	BulkResultListParamsEntityTypeTransaction       BulkResultListParamsEntityType = "transaction"
	BulkResultListParamsEntityTypeExpectedPayment   BulkResultListParamsEntityType = "expected_payment"
	BulkResultListParamsEntityTypeBulkError         BulkResultListParamsEntityType = "bulk_error"
)

func (r BulkResultListParamsEntityType) IsKnown() bool {
	switch r {
	case BulkResultListParamsEntityTypePaymentOrder, BulkResultListParamsEntityTypeLedgerTransaction, BulkResultListParamsEntityTypeTransaction, BulkResultListParamsEntityTypeExpectedPayment, BulkResultListParamsEntityTypeBulkError:
		return true
	}
	return false
}

// The type of the request that created this result. bulk_request is the only
// supported `request_type`
type BulkResultListParamsRequestType string

const (
	BulkResultListParamsRequestTypeBulkRequest BulkResultListParamsRequestType = "bulk_request"
)

func (r BulkResultListParamsRequestType) IsKnown() bool {
	switch r {
	case BulkResultListParamsRequestTypeBulkRequest:
		return true
	}
	return false
}

// One of successful or failed.
type BulkResultListParamsStatus string

const (
	BulkResultListParamsStatusPending    BulkResultListParamsStatus = "pending"
	BulkResultListParamsStatusSuccessful BulkResultListParamsStatus = "successful"
	BulkResultListParamsStatusFailed     BulkResultListParamsStatus = "failed"
)

func (r BulkResultListParamsStatus) IsKnown() bool {
	switch r {
	case BulkResultListParamsStatusPending, BulkResultListParamsStatusSuccessful, BulkResultListParamsStatusFailed:
		return true
	}
	return false
}
